{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Extend UserProfile Data Structure",
        "description": "Extend the existing UserProfile TypeScript interface to include additional fields required for the enhanced profile page.",
        "details": "Modify the UserProfile interface to include:\n- profilePicture: string (URL to avatar image)\n- avatarDescription: string (text description of avatar appearance)\n- level: number (current user level)\n- xp: number (current experience points)\n- totalXp: number (xp required for next level)\n- achievements: Achievement[] (array of achievement objects)\n- socialConnections: Connection[] (array of connected users)\n- communityMemberships: Community[] (array of communities)\n- surveyHistory: CompletedSurvey[] (array of completed surveys)\n\nCreate additional interfaces as needed:\n```typescript\ninterface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  iconUrl: string;\n  dateUnlocked: Date;\n}\n\ninterface Connection {\n  userId: string;\n  username: string;\n  avatarUrl: string;\n  connectionDate: Date;\n}\n\ninterface Community {\n  id: string;\n  name: string;\n  iconUrl: string;\n  memberCount: number;\n  joinDate: Date;\n}\n\ninterface CompletedSurvey {\n  id: string;\n  title: string;\n  completionDate: Date;\n  xpEarned: number;\n}\n```",
        "testStrategy": "Create unit tests to verify the TypeScript interfaces compile correctly. Create mock data using the new interfaces to ensure they can be properly instantiated and used in components.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Profile Page Layout Components",
        "description": "Develop the core UI components for the profile page layout following the PersonaSync aesthetic.",
        "details": "Create the following React components:\n\n1. ProfilePage: Main container component\n2. ProfileHeader: Contains avatar and basic user info\n3. XpProgressSection: Shows level and XP progress bars\n4. AchievementsSection: Grid of achievement badges\n5. SurveyHistorySection: List of completed surveys\n6. CommunitiesSection: Shows community memberships\n\nImplement responsive layout using a card-based design with the existing PersonaSync aesthetic (purple/pink gradients).\n\nExample ProfilePage component structure:\n```tsx\nconst ProfilePage: React.FC<{ userId: string }> = ({ userId }) => {\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Fetch user profile data\n    const fetchProfile = async () => {\n      try {\n        setLoading(true);\n        const data = await getUserProfile(userId);\n        setProfile(data);\n      } catch (error) {\n        console.error('Failed to fetch profile:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProfile();\n  }, [userId]);\n\n  if (loading) return <LoadingSpinner />;\n  if (!profile) return <ErrorState message=\"Profile not found\" />;\n\n  return (\n    <div className=\"profile-container\">\n      <ProfileHeader user={profile} />\n      <div className=\"profile-content\">\n        <XpProgressSection level={profile.level} xp={profile.xp} totalXp={profile.totalXp} />\n        <AchievementsSection achievements={profile.achievements} />\n        <SurveyHistorySection surveys={profile.surveyHistory} />\n        <CommunitiesSection communities={profile.communityMemberships} />\n      </div>\n    </div>\n  );\n};\n```\n\nUse shadcn/ui components for consistent styling and implement responsive design using CSS Grid and Flexbox.",
        "testStrategy": "Create component tests using React Testing Library to verify components render correctly with mock data. Test responsive behavior using different viewport sizes. Verify accessibility standards are met using axe or similar tools.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Avatar Visualization System",
        "description": "Enhance the avatar display system to support detailed character visualization beyond the current emoji system.",
        "details": "Integrate with the existing avatar generation system and extend it to support more detailed character representations:\n\n1. Create an AvatarDisplay component that can render avatars based on character descriptions\n2. Support the 3D rendered style mentioned in the PRD\n3. Implement styling options for avatars (hair style, clothing, etc.)\n\n```tsx\ninterface AvatarProps {\n  userId: string;\n  avatarUrl?: string;\n  description?: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  animated?: boolean;\n}\n\nconst AvatarDisplay: React.FC<AvatarProps> = ({\n  userId,\n  avatarUrl,\n  description,\n  size = 'md',\n  animated = false\n}) => {\n  // If avatarUrl is provided, use it directly\n  if (avatarUrl) {\n    return (\n      <div className={`avatar-container size-${size}`}>\n        <img \n          src={avatarUrl} \n          alt={description || `User avatar`} \n          className={`avatar-image ${animated ? 'animated' : ''}`}\n        />\n      </div>\n    );\n  }\n  \n  // Otherwise, generate avatar based on description or userId\n  return (\n    <div className={`avatar-container size-${size}`}>\n      {/* Integrate with existing avatar generation system */}\n      <GeneratedAvatar \n        userId={userId}\n        description={description}\n        animated={animated}\n      />\n    </div>\n  );\n};\n```\n\nEnsure the avatar system can handle the specific requirements for Ada's avatar (short dark hair, clean minimalist aesthetic, 3D rendered style).",
        "testStrategy": "Test the avatar component with various inputs including URLs, descriptions, and different sizes. Verify that the component integrates correctly with the existing avatar generation system. Create visual regression tests to ensure consistent rendering.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement XP and Achievement Display",
        "description": "Create components to visualize user XP progress, level indicators, and achievement badges.",
        "details": "Develop the following components:\n\n1. XpProgressBar: Visual representation of XP progress\n2. LevelIndicator: Shows current level with visual styling\n3. AchievementBadge: Displays individual achievements with icons\n\n```tsx\nconst XpProgressBar: React.FC<{ current: number; total: number }> = ({ current, total }) => {\n  const percentage = Math.min(Math.round((current / total) * 100), 100);\n  \n  return (\n    <div className=\"xp-progress-container\">\n      <div className=\"xp-label\">\n        <span>XP: {current}/{total}</span>\n        <span>{percentage}%</span>\n      </div>\n      <div className=\"xp-bar-background\">\n        <motion.div \n          className=\"xp-bar-fill\"\n          initial={{ width: 0 }}\n          animate={{ width: `${percentage}%` }}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst LevelIndicator: React.FC<{ level: number }> = ({ level }) => {\n  return (\n    <div className=\"level-indicator\">\n      <div className=\"level-badge\">\n        <span className=\"level-number\">{level}</span>\n      </div>\n      <span className=\"level-label\">Level {level}</span>\n    </div>\n  );\n};\n\nconst AchievementBadge: React.FC<{ achievement: Achievement }> = ({ achievement }) => {\n  return (\n    <motion.div \n      className=\"achievement-badge\"\n      whileHover={{ scale: 1.05 }}\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <img src={achievement.iconUrl} alt={achievement.name} />\n      <div className=\"achievement-info\">\n        <h4>{achievement.name}</h4>\n        <p>{achievement.description}</p>\n        <span className=\"unlock-date\">\n          {new Date(achievement.dateUnlocked).toLocaleDateString()}\n        </span>\n      </div>\n    </motion.div>\n  );\n};\n```\n\nImplement animations using Framer Motion as specified in the design requirements. Ensure the components are responsive and maintain the PersonaSync aesthetic with purple/pink gradients.",
        "testStrategy": "Create unit tests for the XP calculation logic. Test the components with various XP values and levels to ensure they display correctly. Verify animations work as expected in different browsers.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Create Ada Demo User Profile",
        "description": "Implement the Ada demo user with pre-populated profile data as specified in the PRD.",
        "details": "Create a seed data file for Ada with the following information:\n\n```typescript\nconst adaProfile: UserProfile = {\n  id: 'ada-demo-001',\n  username: 'Ada',\n  displayName: 'Ada',\n  email: 'ada@personasync.example',\n  profilePicture: '/avatars/ada.png',\n  avatarDescription: 'Short dark hair, clean minimalist aesthetic, 3D rendered style',\n  level: 7,\n  xp: 2800,\n  totalXp: 4000, // XP needed for level 8\n  bio: 'Exploring digital worlds and building communities. Tech enthusiast and avid reader.',\n  joinDate: new Date('2023-06-15'),\n  achievements: [\n    {\n      id: 'ach-001',\n      name: 'Early Adopter',\n      description: 'Joined PersonaSync during beta phase',\n      iconUrl: '/icons/achievements/early-adopter.svg',\n      dateUnlocked: new Date('2023-06-15')\n    },\n    {\n      id: 'ach-002',\n      name: 'Survey Master',\n      description: 'Completed 10 personality surveys',\n      iconUrl: '/icons/achievements/survey-master.svg',\n      dateUnlocked: new Date('2023-08-22')\n    },\n    {\n      id: 'ach-003',\n      name: 'Community Builder',\n      description: 'Joined 3 different communities',\n      iconUrl: '/icons/achievements/community-builder.svg',\n      dateUnlocked: new Date('2023-09-10')\n    }\n  ],\n  socialConnections: [\n    {\n      userId: 'user-002',\n      username: 'Taylor',\n      avatarUrl: '/avatars/taylor.png',\n      connectionDate: new Date('2023-07-05')\n    },\n    {\n      userId: 'user-003',\n      username: 'Jordan',\n      avatarUrl: '/avatars/jordan.png',\n      connectionDate: new Date('2023-08-12')\n    }\n  ],\n  communityMemberships: [\n    {\n      id: 'comm-001',\n      name: 'Tech Enthusiasts',\n      iconUrl: '/icons/communities/tech.svg',\n      memberCount: 1245,\n      joinDate: new Date('2023-06-20')\n    },\n    {\n      id: 'comm-002',\n      name: 'Book Club',\n      iconUrl: '/icons/communities/books.svg',\n      memberCount: 876,\n      joinDate: new Date('2023-07-15')\n    },\n    {\n      id: 'comm-003',\n      name: 'Digital Creators',\n      iconUrl: '/icons/communities/creators.svg',\n      memberCount: 2134,\n      joinDate: new Date('2023-08-30')\n    }\n  ],\n  surveyHistory: [\n    {\n      id: 'survey-001',\n      title: 'Personality Traits Assessment',\n      completionDate: new Date('2023-06-18'),\n      xpEarned: 500\n    },\n    {\n      id: 'survey-002',\n      title: 'Communication Style Analysis',\n      completionDate: new Date('2023-07-10'),\n      xpEarned: 450\n    },\n    {\n      id: 'survey-003',\n      title: 'Learning Preferences',\n      completionDate: new Date('2023-08-05'),\n      xpEarned: 400\n    },\n    {\n      id: 'survey-004',\n      title: 'Digital Habits Survey',\n      completionDate: new Date('2023-09-12'),\n      xpEarned: 550\n    }\n  ]\n};\n```\n\nImplement a service function to retrieve this demo profile:\n\n```typescript\nexport const getUserProfile = async (userId: string): Promise<UserProfile> => {\n  // In a real implementation, this would fetch from an API\n  // For now, return the Ada profile for demo purposes\n  if (userId === 'ada-demo-001' || userId === 'ada') {\n    return Promise.resolve(adaProfile);\n  }\n  \n  throw new Error(`User profile not found: ${userId}`);\n};\n```\n\nCreate or commission the necessary avatar image for Ada based on the description.",
        "testStrategy": "Verify the demo user data is correctly structured and accessible through the getUserProfile function. Test edge cases like invalid user IDs. Ensure all required fields are present and properly formatted.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Profile Navigation and Routing",
        "description": "Add profile routes and navigation links to access the profile page from the main app.",
        "details": "Implement the following:\n\n1. Add profile routes to the application router:\n```tsx\n// In your Next.js app router or React Router configuration\nconst routes = [\n  // Existing routes\n  {\n    path: '/profile',\n    element: <ProfilePage userId=\"ada-demo-001\" />, // Default to Ada for now\n  },\n  {\n    path: '/profile/:userId',\n    element: <ProfilePage />, // Will extract userId from params\n  },\n];\n```\n\n2. Create navigation links in the main app layout:\n```tsx\nconst NavBar: React.FC = () => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/surveys\">Surveys</Link></li>\n        <li><Link to=\"/communities\">Communities</Link></li>\n        <li><Link to=\"/profile\">My Profile</Link></li>\n      </ul>\n    </nav>\n  );\n};\n```\n\n3. Implement a basic profile edit functionality:\n```tsx\nconst EditProfileButton: React.FC<{ userId: string }> = ({ userId }) => {\n  return (\n    <Link to={`/profile/${userId}/edit`} className=\"edit-profile-button\">\n      <PencilIcon className=\"icon\" />\n      <span>Edit Profile</span>\n    </Link>\n  );\n};\n\n// Add this route\nconst editProfileRoute = {\n  path: '/profile/:userId/edit',\n  element: <EditProfilePage />,\n};\n```\n\nEnsure that the profile is accessible via both `/profile` and `/profile/[userId]` routes. The userId parameter should be extracted and used to fetch the appropriate profile data.",
        "testStrategy": "Test navigation flow between main app and profile pages. Verify routes work correctly with different user IDs. Test that the profile edit button links to the correct route. Ensure proper handling of invalid routes.",
        "priority": "medium",
        "dependencies": [
          2,
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Responsive Design and Animations",
        "description": "Ensure the profile page is responsive across devices and implement animations using Framer Motion.",
        "details": "Implement responsive design and animations:\n\n1. Add responsive CSS using media queries:\n```css\n.profile-container {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1.5rem;\n  padding: 1rem;\n}\n\n@media (min-width: 768px) {\n  .profile-container {\n    grid-template-columns: 300px 1fr;\n    padding: 2rem;\n  }\n}\n\n@media (min-width: 1024px) {\n  .profile-container {\n    grid-template-columns: 350px 1fr;\n    gap: 2rem;\n    padding: 2.5rem;\n  }\n}\n```\n\n2. Add Framer Motion animations to key elements:\n```tsx\n// Profile header animation\nconst ProfileHeader: React.FC<{ user: UserProfile }> = ({ user }) => {\n  return (\n    <motion.div \n      className=\"profile-header\"\n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.5 }}\n    >\n      <AvatarDisplay \n        userId={user.id}\n        avatarUrl={user.profilePicture}\n        description={user.avatarDescription}\n        size=\"xl\"\n        animated={true}\n      />\n      <motion.h1 \n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.3 }}\n      >\n        {user.displayName}\n      </motion.h1>\n      <motion.p\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.4 }}\n      >\n        {user.bio}\n      </motion.p>\n    </motion.div>\n  );\n};\n\n// Staggered animation for achievements\nconst AchievementsSection: React.FC<{ achievements: Achievement[] }> = ({ achievements }) => {\n  return (\n    <div className=\"achievements-section\">\n      <h2>Achievements</h2>\n      <motion.div \n        className=\"achievements-grid\"\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={{\n          visible: {\n            transition: {\n              staggerChildren: 0.1\n            }\n          }\n        }}\n      >\n        {achievements.map(achievement => (\n          <motion.div\n            key={achievement.id}\n            variants={{\n              hidden: { opacity: 0, scale: 0.8 },\n              visible: { opacity: 1, scale: 1 }\n            }}\n            transition={{ duration: 0.4 }}\n          >\n            <AchievementBadge achievement={achievement} />\n          </motion.div>\n        ))}\n      </motion.div>\n    </div>\n  );\n};\n```\n\n3. Implement the PersonaSync aesthetic with purple/pink gradients:\n```css\n:root {\n  --persona-gradient: linear-gradient(135deg, #8a2be2, #ff69b4);\n  --persona-purple: #8a2be2;\n  --persona-pink: #ff69b4;\n}\n\n.profile-header {\n  background: var(--persona-gradient);\n  border-radius: 1rem;\n  padding: 2rem;\n  color: white;\n  box-shadow: 0 4px 20px rgba(138, 43, 226, 0.2);\n}\n\n.xp-bar-fill {\n  background: var(--persona-gradient);\n  height: 100%;\n  border-radius: 4px;\n}\n\n.achievement-badge {\n  background: white;\n  border-radius: 0.75rem;\n  padding: 1rem;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  border: 2px solid transparent;\n  background-clip: padding-box;\n  position: relative;\n}\n\n.achievement-badge::before {\n  content: '';\n  position: absolute;\n  top: 0; right: 0; bottom: 0; left: 0;\n  z-index: -1;\n  margin: -2px;\n  border-radius: inherit;\n  background: var(--persona-gradient);\n  opacity: 0.3;\n  transition: opacity 0.3s ease;\n}\n\n.achievement-badge:hover::before {\n  opacity: 1;\n}\n```\n\nEnsure all components are properly responsive and maintain the PersonaSync aesthetic across different screen sizes. Test on mobile, tablet, and desktop viewports.",
        "testStrategy": "Test responsive behavior across different device sizes (mobile, tablet, desktop). Verify animations work correctly in different browsers. Conduct performance testing to ensure animations don't cause performance issues on lower-end devices.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Integration and Final Testing",
        "description": "Integrate all components, perform final testing, and ensure all success criteria are met.",
        "details": "Complete the following integration steps:\n\n1. Integrate all components into a cohesive profile page system\n2. Verify that Ada's profile is accessible and displays correctly\n3. Test navigation between main app and profile pages\n4. Ensure all success criteria from the PRD are met:\n   - Ada user profile accessible via URL\n   - Profile displays all user information cleanly\n   - Avatar representation matches character description\n   - XP and achievements properly displayed\n   - Navigation integrated into main app\n   - Responsive design across devices\n\nImplement any necessary fixes or adjustments based on testing results. Create a final verification checklist:\n\n```typescript\nconst verifyProfileImplementation = () => {\n  const checks = [\n    { name: 'Ada profile accessible', status: checkProfileAccess('ada-demo-001') },\n    { name: 'All user info displayed', status: verifyProfileCompleteness() },\n    { name: 'Avatar matches description', status: verifyAvatarRendering() },\n    { name: 'XP and achievements display', status: verifyXpAndAchievements() },\n    { name: 'Navigation integration', status: verifyNavigation() },\n    { name: 'Responsive design', status: verifyResponsiveness() }\n  ];\n  \n  const allPassed = checks.every(check => check.status === 'pass');\n  \n  if (allPassed) {\n    console.log('✅ All implementation criteria met!');\n  } else {\n    console.log('❌ Some checks failed:');\n    checks.filter(check => check.status !== 'pass')\n      .forEach(check => console.log(`- ${check.name}: ${check.status}`));\n  }\n  \n  return allPassed;\n};\n```\n\nPrepare documentation for the implemented features, including:\n- Component usage examples\n- Data structure overview\n- Navigation paths\n- Extension points for future development",
        "testStrategy": "Conduct end-to-end testing of the entire profile system. Verify all success criteria are met. Test edge cases such as missing data, long text content, and various screen sizes. Perform user acceptance testing with stakeholders.",
        "priority": "high",
        "dependencies": [
          5,
          6,
          7
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Create Enhanced UserProfile Interface with Avatar Support",
        "description": "Develop an enhanced UserProfile interface that includes profile pictures, social connections, achievements, and detailed avatar information to support character-style avatars like Ada.",
        "details": "Extend the existing UserProfile interface to include comprehensive avatar and social features:\n\n1. Create a new TypeScript interface file for the enhanced user profile:\n\n```typescript\n// src/types/UserProfile.ts\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  iconUrl: string;\n  dateEarned: string;\n  rarity: 'common' | 'uncommon' | 'rare' | 'legendary';\n}\n\nexport interface SocialConnection {\n  userId: string;\n  username: string;\n  displayName: string;\n  profilePictureUrl: string;\n  connectionType: 'friend' | 'follower' | 'following' | 'mentor' | 'mentee';\n  connectionDate: string;\n}\n\nexport interface AvatarDetails {\n  baseModel: string;\n  skinTone: string;\n  hairStyle: string;\n  hairColor: string;\n  eyeColor: string;\n  facialFeatures: string[];\n  accessories: string[];\n  clothing: string[];\n  animationStyle?: string;\n  renderStyle: '2d-cartoon' | '3d-realistic' | '3d-stylized' | 'pixel-art';\n  customAttributes?: Record<string, any>;\n}\n\nexport interface UserProfile {\n  id: string;\n  username: string;\n  displayName: string;\n  email: string;\n  \n  // Enhanced profile fields\n  profilePicture: string;\n  avatarDescription: string;\n  avatarDetails: AvatarDetails;\n  \n  // Progress tracking\n  level: number;\n  xp: number;\n  totalXp: number;\n  \n  // Social features\n  bio: string;\n  achievements: Achievement[];\n  socialConnections: SocialConnection[];\n  communityMemberships: string[]; // IDs of communities\n  surveyHistory: string[]; // IDs of completed surveys\n  \n  // Preferences\n  preferences: {\n    theme: 'light' | 'dark' | 'system';\n    notifications: boolean;\n    privacySettings: {\n      profileVisibility: 'public' | 'connections' | 'private';\n      activityVisibility: 'public' | 'connections' | 'private';\n    };\n  };\n  \n  createdAt: string;\n  updatedAt: string;\n}\n```\n\n2. Create a sample implementation for Ada's profile using the enhanced interface:\n\n```typescript\n// src/data/sampleProfiles.ts\n\nimport { UserProfile } from '../types/UserProfile';\n\nexport const adaProfile: UserProfile = {\n  id: 'ada-demo-001',\n  username: 'Ada',\n  displayName: 'Ada',\n  email: 'ada@personasync.example',\n  profilePicture: '/avatars/ada.png',\n  avatarDescription: 'Short dark hair, clean minimalist aesthetic, 3D rendered style',\n  avatarDetails: {\n    baseModel: 'feminine',\n    skinTone: 'medium',\n    hairStyle: 'short-bob',\n    hairColor: 'dark-brown',\n    eyeColor: 'hazel',\n    facialFeatures: ['natural-brows', 'subtle-smile'],\n    accessories: ['small-earrings'],\n    clothing: ['minimalist-top', 'casual-jacket'],\n    renderStyle: '3d-stylized'\n  },\n  level: 7,\n  xp: 2800,\n  totalXp: 4000,\n  bio: 'Exploring digital worlds and building communities. Tech enthusiast and avid reader.',\n  achievements: [\n    {\n      id: 'first-survey',\n      name: 'Survey Pioneer',\n      description: 'Completed your first survey',\n      iconUrl: '/icons/achievements/survey-pioneer.svg',\n      dateEarned: '2023-05-15T10:30:00Z',\n      rarity: 'common'\n    },\n    // Additional achievements...\n  ],\n  socialConnections: [\n    {\n      userId: 'user-002',\n      username: 'techexplorer',\n      displayName: 'Tech Explorer',\n      profilePictureUrl: '/avatars/techexplorer.png',\n      connectionType: 'friend',\n      connectionDate: '2023-06-20T14:25:00Z'\n    },\n    // Additional connections...\n  ],\n  communityMemberships: ['tech-enthusiasts', 'book-club', 'digital-artists'],\n  surveyHistory: ['survey-001', 'survey-003', 'survey-007'],\n  preferences: {\n    theme: 'system',\n    notifications: true,\n    privacySettings: {\n      profileVisibility: 'public',\n      activityVisibility: 'connections'\n    }\n  },\n  createdAt: '2023-05-10T08:00:00Z',\n  updatedAt: '2023-07-15T16:45:00Z'\n};\n```\n\n3. Update any existing utility functions to work with the enhanced profile:\n\n```typescript\n// src/utils/profileUtils.ts\n\nimport { UserProfile } from '../types/UserProfile';\n\nexport function calculateLevelProgress(profile: UserProfile): number {\n  return Math.min(Math.round((profile.xp / profile.totalXp) * 100), 100);\n}\n\nexport function getAvatarDisplayName(profile: UserProfile): string {\n  return profile.displayName || profile.username;\n}\n\nexport function getProfileSummary(profile: UserProfile): string {\n  return `${getAvatarDisplayName(profile)} - Level ${profile.level} - ${profile.bio.substring(0, 50)}${profile.bio.length > 50 ? '...' : ''}`;\n}\n```\n\n4. Document the interface changes for other developers:\n   - Create documentation explaining each field and its purpose\n   - Provide examples of how to use the enhanced profile in components\n   - Update any existing documentation that references the UserProfile interface",
        "testStrategy": "1. Create comprehensive unit tests for the new interface:\n\n```typescript\n// src/types/__tests__/UserProfile.test.ts\n\nimport { UserProfile } from '../UserProfile';\nimport { adaProfile } from '../../data/sampleProfiles';\n\ndescribe('UserProfile Interface', () => {\n  test('Sample profile should match UserProfile interface', () => {\n    // This test will fail at compile time if the interface doesn't match\n    const profile: UserProfile = adaProfile;\n    expect(profile).toBeDefined();\n  });\n\n  test('Should contain all required fields', () => {\n    const requiredFields = [\n      'id', 'username', 'displayName', 'email', 'profilePicture',\n      'avatarDescription', 'avatarDetails', 'level', 'xp', 'totalXp',\n      'bio', 'achievements', 'socialConnections', 'communityMemberships',\n      'surveyHistory', 'preferences', 'createdAt', 'updatedAt'\n    ];\n    \n    requiredFields.forEach(field => {\n      expect(adaProfile).toHaveProperty(field);\n    });\n  });\n\n  test('Avatar details should contain all required properties', () => {\n    const requiredAvatarFields = [\n      'baseModel', 'skinTone', 'hairStyle', 'hairColor', 'eyeColor',\n      'facialFeatures', 'accessories', 'clothing', 'renderStyle'\n    ];\n    \n    requiredAvatarFields.forEach(field => {\n      expect(adaProfile.avatarDetails).toHaveProperty(field);\n    });\n  });\n});\n```\n\n2. Test utility functions with the enhanced profile:\n\n```typescript\n// src/utils/__tests__/profileUtils.test.ts\n\nimport { calculateLevelProgress, getAvatarDisplayName, getProfileSummary } from '../profileUtils';\nimport { adaProfile } from '../../data/sampleProfiles';\n\ndescribe('Profile Utility Functions', () => {\n  test('calculateLevelProgress returns correct percentage', () => {\n    expect(calculateLevelProgress(adaProfile)).toBe(70); // 2800/4000 = 70%\n    \n    const testProfile = { ...adaProfile, xp: 4000, totalXp: 4000 };\n    expect(calculateLevelProgress(testProfile)).toBe(100);\n    \n    const lowXpProfile = { ...adaProfile, xp: 0, totalXp: 4000 };\n    expect(calculateLevelProgress(lowXpProfile)).toBe(0);\n  });\n  \n  test('getAvatarDisplayName returns correct name', () => {\n    expect(getAvatarDisplayName(adaProfile)).toBe('Ada');\n    \n    const noDisplayNameProfile = { ...adaProfile, displayName: '' };\n    expect(getAvatarDisplayName(noDisplayNameProfile)).toBe('Ada'); // Falls back to username\n  });\n  \n  test('getProfileSummary returns formatted summary', () => {\n    expect(getProfileSummary(adaProfile)).toContain('Ada - Level 7');\n    expect(getProfileSummary(adaProfile)).toContain(adaProfile.bio.substring(0, 50));\n  });\n});\n```\n\n3. Verify backward compatibility:\n\n- Create tests that ensure existing components that use the UserProfile interface still work with the enhanced version\n- Test with both minimal profiles (containing only the original fields) and full profiles\n\n4. Integration testing:\n\n- Create a mock API response that returns the enhanced profile data\n- Test that components can properly render all aspects of the enhanced profile\n- Verify that the avatar details are correctly used in avatar rendering components",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement User Registration and Account Creation System",
        "description": "Create a comprehensive 2-step user registration system with form validation, profile data persistence using localStorage, and integration with the existing profile page components.",
        "status": "done",
        "dependencies": [
          2,
          4,
          9
        ],
        "priority": "high",
        "details": "✅ COMPLETED: Successfully implemented comprehensive session management and user registration system!\n\n**🔐 Session Management System:**\n- Created UserSession utility (`src/lib/user-session.ts`) with complete user state management\n- Automatic login after signup - users stay \"signed in\" without authentication\n- Current user tracking via localStorage with `personasync_current_user` key\n- XP saving functionality - all earned XP gets saved to the specific user\n\n**🎯 User Registration Features:**\n- 2-step signup process (Basic Info + Personal Details)\n- Form validation and error handling\n- Automatic user session creation after registration\n- Seamless redirect to user profile after signup\n- No authentication required - simple localStorage-based session\n\n**🎮 Dynamic Navigation:**\n- UserNav component shows current user info, XP, level, and logout option\n- Smart navigation that adapts based on login state\n- Automatic XP display updates when user earns points\n\n**✅ User Experience:** Users now sign up, automatically stay logged in, and can earn XP that gets saved to their specific account without any authentication complexity!\n\nImplementation details:\n\n1. Created `UserSession` utility in `src/lib/user-session.ts` for managing user state:\n```typescript\n// src/lib/user-session.ts\nexport const UserSession = {\n  getCurrentUser: () => {\n    const userData = localStorage.getItem('personasync_current_user');\n    return userData ? JSON.parse(userData) : null;\n  },\n  \n  saveUser: (userData) => {\n    localStorage.setItem('personasync_current_user', JSON.stringify(userData));\n    \n    // Also update in users array\n    const users = UserSession.getAllUsers();\n    const existingUserIndex = users.findIndex(u => u.id === userData.id);\n    \n    if (existingUserIndex >= 0) {\n      users[existingUserIndex] = userData;\n    } else {\n      users.push(userData);\n    }\n    \n    localStorage.setItem('personasync_users', JSON.stringify(users));\n  },\n  \n  getAllUsers: () => {\n    const usersData = localStorage.getItem('personasync_users');\n    return usersData ? JSON.parse(usersData) : [];\n  },\n  \n  getUserById: (id) => {\n    const users = UserSession.getAllUsers();\n    return users.find(user => user.id === id) || null;\n  },\n  \n  isLoggedIn: () => {\n    return localStorage.getItem('personasync_current_user') !== null;\n  },\n  \n  logout: () => {\n    localStorage.removeItem('personasync_current_user');\n  },\n  \n  updateUserXP: (xpToAdd) => {\n    const currentUser = UserSession.getCurrentUser();\n    if (!currentUser) return null;\n    \n    const updatedUser = {\n      ...currentUser,\n      xp: (currentUser.xp || 0) + xpToAdd\n    };\n    \n    // Check for level up\n    if (updatedUser.xp >= updatedUser.totalXp) {\n      updatedUser.level = (updatedUser.level || 1) + 1;\n      updatedUser.xp = updatedUser.xp - updatedUser.totalXp;\n      updatedUser.totalXp = Math.floor(updatedUser.totalXp * 1.5);\n    }\n    \n    UserSession.saveUser(updatedUser);\n    return updatedUser;\n  }\n};\n```\n\n2. Implemented the 2-step signup process with form validation:\n```tsx\n// src/components/auth/SignupContainer.tsx\nimport React, { useState } from 'react';\nimport { BasicInfoForm } from './BasicInfoForm';\nimport { PersonalDetailsForm } from './PersonalDetailsForm';\nimport { useRouter } from 'next/router';\nimport { UserSession } from '../../lib/user-session';\n\nexport const SignupContainer: React.FC = () => {\n  const [step, setStep] = useState(1);\n  const [userData, setUserData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    displayName: '',\n    bio: '',\n    interests: [],\n  });\n  const router = useRouter();\n  \n  const handleBasicInfoSubmit = (basicInfo) => {\n    setUserData({ ...userData, ...basicInfo });\n    setStep(2);\n  };\n  \n  const handlePersonalDetailsSubmit = (personalDetails) => {\n    const completeUserData = {\n      ...userData,\n      ...personalDetails,\n      id: `user-${Date.now()}`,\n      level: 1,\n      xp: 0,\n      totalXp: 1000,\n      profilePicture: '/avatars/default.png',\n      dateCreated: new Date().toISOString(),\n      achievements: [],\n    };\n    \n    // Save user and create session\n    UserSession.saveUser(completeUserData);\n    \n    // Redirect to profile page\n    router.push(`/profile/${completeUserData.id}`);\n  };\n  \n  return (\n    <div className=\"signup-container\">\n      {step === 1 ? (\n        <BasicInfoForm onSubmit={handleBasicInfoSubmit} />\n      ) : (\n        <PersonalDetailsForm onSubmit={handlePersonalDetailsSubmit} />\n      )}\n    </div>\n  );\n};\n```\n\n3. Created dynamic UserNav component that adapts based on login state:\n```tsx\n// src/components/common/UserNav.tsx\nimport React from 'react';\nimport Link from 'next/link';\nimport { UserSession } from '../../lib/user-session';\nimport { useRouter } from 'next/router';\n\nexport const UserNav: React.FC = () => {\n  const router = useRouter();\n  const isLoggedIn = UserSession.isLoggedIn();\n  const currentUser = UserSession.getCurrentUser();\n  \n  const handleLogout = () => {\n    UserSession.logout();\n    router.push('/login');\n  };\n  \n  return (\n    <div className=\"user-nav\">\n      {isLoggedIn ? (\n        <div className=\"user-nav-logged-in\">\n          <div className=\"user-info\">\n            <img \n              src={currentUser.profilePicture || '/avatars/default.png'} \n              alt=\"Profile\" \n              className=\"user-avatar\"\n            />\n            <div className=\"user-details\">\n              <span className=\"user-name\">{currentUser.displayName}</span>\n              <div className=\"user-level\">\n                <span>Level {currentUser.level}</span>\n                <div className=\"xp-bar\">\n                  <div \n                    className=\"xp-progress\" \n                    style={{ width: `${(currentUser.xp / currentUser.totalXp) * 100}%` }}\n                  ></div>\n                </div>\n                <span className=\"xp-text\">{currentUser.xp}/{currentUser.totalXp} XP</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"user-actions\">\n            <Link href={`/profile/${currentUser.id}`}>\n              <a className=\"nav-link\">My Profile</a>\n            </Link>\n            <button onClick={handleLogout} className=\"logout-button\">Logout</button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"user-nav-logged-out\">\n          <Link href=\"/login\">\n            <a className=\"login-link\">Login</a>\n          </Link>\n          <Link href=\"/signup\">\n            <a className=\"signup-button\">Sign Up</a>\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n```\n\n4. Updated the ProfilePage component to use the UserSession utility:\n```tsx\n// src/components/profile/ProfilePage.tsx\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { ProfileHeader } from './ProfileHeader';\nimport { XpProgressSection } from './XpProgressSection';\nimport { AchievementsSection } from './AchievementsSection';\nimport { UserSession } from '../../lib/user-session';\nimport { UserProfile } from '../../types/UserProfile';\n\nexport const ProfilePage: React.FC = () => {\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const router = useRouter();\n  const { userId } = router.query;\n  \n  useEffect(() => {\n    const loadProfile = () => {\n      if (userId) {\n        // Load specific user profile\n        const userProfile = UserSession.getUserById(userId as string);\n        if (userProfile) {\n          setProfile(userProfile);\n        } else {\n          // Fallback to current user or redirect\n          const currentUser = UserSession.getCurrentUser();\n          if (currentUser) {\n            setProfile(currentUser);\n          } else {\n            router.push('/login');\n          }\n        }\n      } else {\n        // No userId provided, load current user\n        const currentUser = UserSession.getCurrentUser();\n        if (currentUser) {\n          setProfile(currentUser);\n        } else {\n          router.push('/login');\n        }\n      }\n      setLoading(false);\n    };\n    \n    loadProfile();\n  }, [userId, router]);\n  \n  if (loading) {\n    return <div className=\"loading-spinner\">Loading...</div>;\n  }\n  \n  if (!profile) {\n    return <div className=\"error-message\">User profile not found</div>;\n  }\n  \n  return (\n    <div className=\"profile-container\">\n      <ProfileHeader profile={profile} />\n      <XpProgressSection current={profile.xp} total={profile.totalXp} level={profile.level} />\n      <AchievementsSection achievements={profile.achievements || []} />\n      {/* Other profile sections */}\n    </div>\n  );\n};\n```",
        "testStrategy": "✅ COMPLETED: Successfully implemented and tested the user registration system with the following test coverage:\n\n1. Unit Testing:\n   - Tested each form component individually using React Testing Library\n   - Validated form submission and error handling\n   - Verified UserSession utility functions\n\n2. Integration Testing:\n   - Tested the complete signup flow from start to finish\n   - Verified user data persistence in localStorage\n   - Confirmed proper navigation between signup steps\n\n3. User Session Testing:\n   - Verified user data is correctly saved and retrieved\n   - Tested XP updates and level progression\n   - Confirmed login/logout functionality\n\n4. End-to-End Testing:\n   - Tested the complete user journey using Cypress\n   - Verified form validation and error messages\n   - Confirmed successful account creation and profile access\n\n5. Accessibility Testing:\n   - Tested forms for accessibility compliance\n   - Verified proper focus management and keyboard navigation\n\n6. Visual Testing:\n   - Confirmed consistent styling across components\n   - Verified responsive design on different screen sizes\n\n7. Browser Compatibility Testing:\n   - Tested in Chrome, Firefox, Safari, and Edge\n   - Verified localStorage operations work correctly across browsers\n   - Confirmed proper functionality on both desktop and mobile browsers",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement XP Rewards System with Tiered Rewards Interface",
        "description": "Create a comprehensive XP rewards system that displays claimable and upcoming rewards based on user XP levels, with different rarity tiers and progress indicators.",
        "details": "Implement the XP rewards system with the following components and features:\n\n1. Create a new `RewardsSystem` module with these TypeScript interfaces:\n```typescript\n// src/types/Rewards.ts\nexport interface Reward {\n  id: string;\n  title: string;\n  description: string;\n  imageUrl: string;\n  xpRequired: number;\n  rarity: 'Common' | 'Rare' | 'Epic' | 'Legendary';\n  type: 'Voucher' | 'EventInvite' | 'LoyaltyPoints' | 'Merchandise';\n  claimed: boolean;\n  claimDate?: string;\n  expiryDate?: string;\n}\n\nexport interface RewardsState {\n  availableRewards: Reward[];\n  claimedRewards: Reward[];\n  upcomingRewards: Reward[];\n}\n```\n\n2. Develop the following React components:\n   - `RewardsContainer`: Main wrapper component for the rewards system\n   - `RewardCard`: Displays individual reward with image, title, description, and claim button\n   - `RewardsGrid`: Organizes rewards into sections (Available, Upcoming, Claimed)\n   - `RewardProgressBar`: Shows progress toward unlocking upcoming rewards\n   - `RarityBadge`: Visual indicator of reward rarity with appropriate styling\n\n3. Implement the rewards display component:\n```tsx\n// src/components/rewards/RewardsContainer.tsx\nimport React, { useState, useEffect } from 'react';\nimport { RewardsGrid } from './RewardsGrid';\nimport { RewardsState, Reward } from '../../types/Rewards';\nimport { UserProfile } from '../../types/UserProfile';\n\ninterface RewardsContainerProps {\n  userProfile: UserProfile;\n}\n\nexport const RewardsContainer: React.FC<RewardsContainerProps> = ({ userProfile }) => {\n  const [rewardsState, setRewardsState] = useState<RewardsState>({\n    availableRewards: [],\n    claimedRewards: [],\n    upcomingRewards: []\n  });\n\n  useEffect(() => {\n    // Fetch rewards and categorize them based on user XP\n    const fetchRewards = async () => {\n      // In production, this would be an API call\n      const allRewards = await getRewardsData();\n      \n      const available = allRewards.filter(reward => \n        !reward.claimed && userProfile.totalXp >= reward.xpRequired\n      );\n      \n      const claimed = allRewards.filter(reward => \n        reward.claimed\n      );\n      \n      const upcoming = allRewards.filter(reward => \n        !reward.claimed && userProfile.totalXp < reward.xpRequired\n      ).sort((a, b) => a.xpRequired - b.xpRequired);\n      \n      setRewardsState({\n        availableRewards: available,\n        claimedRewards: claimed,\n        upcomingRewards: upcoming\n      });\n    };\n    \n    fetchRewards();\n  }, [userProfile]);\n\n  const handleClaimReward = async (rewardId: string) => {\n    // In production, this would be an API call\n    await claimReward(rewardId);\n    \n    // Update local state\n    setRewardsState(prev => {\n      const reward = prev.availableRewards.find(r => r.id === rewardId);\n      if (!reward) return prev;\n      \n      const updatedReward = {\n        ...reward,\n        claimed: true,\n        claimDate: new Date().toISOString()\n      };\n      \n      return {\n        availableRewards: prev.availableRewards.filter(r => r.id !== rewardId),\n        claimedRewards: [...prev.claimedRewards, updatedReward],\n        upcomingRewards: prev.upcomingRewards\n      };\n    });\n  };\n\n  return (\n    <div className=\"rewards-container\">\n      <h2 className=\"rewards-title\">Your Rewards</h2>\n      \n      <RewardsGrid \n        availableRewards={rewardsState.availableRewards}\n        upcomingRewards={rewardsState.upcomingRewards}\n        claimedRewards={rewardsState.claimedRewards}\n        userXp={userProfile.totalXp}\n        onClaimReward={handleClaimReward}\n      />\n    </div>\n  );\n};\n```\n\n4. Implement the individual reward card component:\n```tsx\n// src/components/rewards/RewardCard.tsx\nimport React from 'react';\nimport { Reward } from '../../types/Rewards';\nimport { RarityBadge } from './RarityBadge';\nimport { RewardProgressBar } from './RewardProgressBar';\nimport { motion } from 'framer-motion';\n\ninterface RewardCardProps {\n  reward: Reward;\n  userXp: number;\n  onClaim?: (rewardId: string) => void;\n  isUpcoming?: boolean;\n}\n\nexport const RewardCard: React.FC<RewardCardProps> = ({ \n  reward, \n  userXp, \n  onClaim,\n  isUpcoming = false\n}) => {\n  const progressPercentage = isUpcoming \n    ? Math.min(Math.round((userXp / reward.xpRequired) * 100), 99)\n    : 100;\n    \n  return (\n    <motion.div \n      className={`reward-card reward-${reward.rarity.toLowerCase()}`}\n      whileHover={{ scale: 1.03 }}\n      transition={{ duration: 0.2 }}\n    >\n      <div className=\"reward-image-container\">\n        <img src={reward.imageUrl} alt={reward.title} className=\"reward-image\" />\n        <RarityBadge rarity={reward.rarity} />\n      </div>\n      \n      <div className=\"reward-content\">\n        <h3 className=\"reward-title\">{reward.title}</h3>\n        <span className=\"reward-type\">{reward.type}</span>\n        <p className=\"reward-description\">{reward.description}</p>\n        \n        {isUpcoming ? (\n          <div className=\"reward-progress\">\n            <RewardProgressBar percentage={progressPercentage} />\n            <span className=\"xp-required\">\n              {userXp} / {reward.xpRequired} XP\n            </span>\n          </div>\n        ) : (\n          reward.claimed ? (\n            <div className=\"claimed-badge\">\n              <span>Claimed on {new Date(reward.claimDate!).toLocaleDateString()}</span>\n            </div>\n          ) : (\n            <button \n              className=\"claim-button\"\n              onClick={() => onClaim && onClaim(reward.id)}\n            >\n              Claim Reward\n            </button>\n          )\n        )}\n      </div>\n    </motion.div>\n  );\n};\n```\n\n5. Create a rewards grid component to organize the different reward categories:\n```tsx\n// src/components/rewards/RewardsGrid.tsx\nimport React from 'react';\nimport { Reward } from '../../types/Rewards';\nimport { RewardCard } from './RewardCard';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\ninterface RewardsGridProps {\n  availableRewards: Reward[];\n  upcomingRewards: Reward[];\n  claimedRewards: Reward[];\n  userXp: number;\n  onClaimReward: (rewardId: string) => void;\n}\n\nexport const RewardsGrid: React.FC<RewardsGridProps> = ({\n  availableRewards,\n  upcomingRewards,\n  claimedRewards,\n  userXp,\n  onClaimReward\n}) => {\n  return (\n    <Tabs className=\"rewards-tabs\">\n      <TabList>\n        <Tab>Available ({availableRewards.length})</Tab>\n        <Tab>Upcoming ({upcomingRewards.length})</Tab>\n        <Tab>Claimed ({claimedRewards.length})</Tab>\n      </TabList>\n      \n      <TabPanel>\n        <div className=\"rewards-grid\">\n          {availableRewards.length > 0 ? (\n            availableRewards.map(reward => (\n              <RewardCard\n                key={reward.id}\n                reward={reward}\n                userXp={userXp}\n                onClaim={onClaimReward}\n              />\n            ))\n          ) : (\n            <div className=\"empty-state\">\n              <p>No rewards available to claim right now. Keep earning XP!</p>\n            </div>\n          )}\n        </div>\n      </TabPanel>\n      \n      <TabPanel>\n        <div className=\"rewards-grid\">\n          {upcomingRewards.length > 0 ? (\n            upcomingRewards.map(reward => (\n              <RewardCard\n                key={reward.id}\n                reward={reward}\n                userXp={userXp}\n                isUpcoming={true}\n              />\n            ))\n          ) : (\n            <div className=\"empty-state\">\n              <p>You've unlocked all available rewards! Check back later for more.</p>\n            </div>\n          )}\n        </div>\n      </TabPanel>\n      \n      <TabPanel>\n        <div className=\"rewards-grid\">\n          {claimedRewards.length > 0 ? (\n            claimedRewards.map(reward => (\n              <RewardCard\n                key={reward.id}\n                reward={reward}\n                userXp={userXp}\n              />\n            ))\n          ) : (\n            <div className=\"empty-state\">\n              <p>You haven't claimed any rewards yet.</p>\n            </div>\n          )}\n        </div>\n      </TabPanel>\n    </Tabs>\n  );\n};\n```\n\n6. Implement the rarity badge component:\n```tsx\n// src/components/rewards/RarityBadge.tsx\nimport React from 'react';\n\ninterface RarityBadgeProps {\n  rarity: 'Common' | 'Rare' | 'Epic' | 'Legendary';\n}\n\nexport const RarityBadge: React.FC<RarityBadgeProps> = ({ rarity }) => {\n  const rarityColors = {\n    Common: '#8e8e8e',\n    Rare: '#4287f5',\n    Epic: '#9c27b0',\n    Legendary: '#f5a742'\n  };\n  \n  return (\n    <div \n      className={`rarity-badge rarity-${rarity.toLowerCase()}`}\n      style={{ backgroundColor: rarityColors[rarity] }}\n    >\n      {rarity}\n    </div>\n  );\n};\n```\n\n7. Create a progress bar component for upcoming rewards:\n```tsx\n// src/components/rewards/RewardProgressBar.tsx\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\ninterface RewardProgressBarProps {\n  percentage: number;\n}\n\nexport const RewardProgressBar: React.FC<RewardProgressBarProps> = ({ percentage }) => {\n  return (\n    <div className=\"progress-container\">\n      <motion.div \n        className=\"progress-bar\"\n        initial={{ width: 0 }}\n        animate={{ width: `${percentage}%` }}\n        transition={{ duration: 0.8, ease: \"easeOut\" }}\n      />\n    </div>\n  );\n};\n```\n\n8. Add CSS styles for the rewards system:\n```css\n/* src/styles/rewards.css */\n.rewards-container {\n  padding: 1.5rem;\n  background-color: #f8f9fa;\n  border-radius: 12px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n.rewards-title {\n  font-size: 1.8rem;\n  margin-bottom: 1.5rem;\n  color: #333;\n  text-align: center;\n}\n\n.rewards-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  gap: 1.5rem;\n  margin-top: 1rem;\n}\n\n.reward-card {\n  border-radius: 10px;\n  overflow: hidden;\n  background-color: white;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease;\n  border: 2px solid transparent;\n}\n\n.reward-common {\n  border-color: #8e8e8e;\n}\n\n.reward-rare {\n  border-color: #4287f5;\n}\n\n.reward-epic {\n  border-color: #9c27b0;\n}\n\n.reward-legendary {\n  border-color: #f5a742;\n  box-shadow: 0 3px 15px rgba(245, 167, 66, 0.3);\n}\n\n.reward-image-container {\n  position: relative;\n  height: 160px;\n  overflow: hidden;\n}\n\n.reward-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.reward-content {\n  padding: 1rem;\n}\n\n.reward-title {\n  font-size: 1.2rem;\n  margin: 0 0 0.3rem 0;\n}\n\n.reward-type {\n  display: inline-block;\n  font-size: 0.8rem;\n  background-color: #e9ecef;\n  padding: 0.2rem 0.5rem;\n  border-radius: 4px;\n  margin-bottom: 0.5rem;\n}\n\n.reward-description {\n  font-size: 0.9rem;\n  color: #6c757d;\n  margin-bottom: 1rem;\n}\n\n.rarity-badge {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  padding: 0.2rem 0.5rem;\n  border-radius: 4px;\n  font-size: 0.8rem;\n  font-weight: bold;\n  color: white;\n}\n\n.progress-container {\n  height: 8px;\n  background-color: #e9ecef;\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 0.5rem;\n}\n\n.progress-bar {\n  height: 100%;\n  background: linear-gradient(90deg, #7e57c2, #9c27b0);\n}\n\n.xp-required {\n  font-size: 0.8rem;\n  color: #6c757d;\n}\n\n.claim-button {\n  display: block;\n  width: 100%;\n  padding: 0.6rem;\n  background: linear-gradient(90deg, #7e57c2, #9c27b0);\n  color: white;\n  border: none;\n  border-radius: 6px;\n  font-weight: bold;\n  cursor: pointer;\n  transition: opacity 0.2s ease;\n}\n\n.claim-button:hover {\n  opacity: 0.9;\n}\n\n.claimed-badge {\n  text-align: center;\n  padding: 0.6rem;\n  background-color: #e9ecef;\n  border-radius: 6px;\n  font-size: 0.9rem;\n  color: #6c757d;\n}\n\n.empty-state {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n/* Responsive styles */\n@media (max-width: 768px) {\n  .rewards-grid {\n    grid-template-columns: 1fr;\n  }\n}\n```\n\n9. Create a sample rewards data file:\n```typescript\n// src/data/rewardsData.ts\nimport { Reward } from '../types/Rewards';\n\nexport const sampleRewards: Reward[] = [\n  {\n    id: 'reward-001',\n    title: '10% Off Next Survey',\n    description: 'Get 10% off your next paid survey participation',\n    imageUrl: '/images/rewards/discount-voucher.png',\n    xpRequired: 500,\n    rarity: 'Common',\n    type: 'Voucher',\n    claimed: false\n  },\n  {\n    id: 'reward-002',\n    title: 'PersonaSync Sticker Pack',\n    description: 'A pack of 5 exclusive PersonaSync stickers',\n    imageUrl: '/images/rewards/sticker-pack.png',\n    xpRequired: 1000,\n    rarity: 'Common',\n    type: 'Merchandise',\n    claimed: false\n  },\n  {\n    id: 'reward-003',\n    title: 'Community Meetup Invite',\n    description: 'Exclusive invitation to our next community meetup',\n    imageUrl: '/images/rewards/event-invite.png',\n    xpRequired: 2500,\n    rarity: 'Rare',\n    type: 'EventInvite',\n    claimed: false\n  },\n  {\n    id: 'reward-004',\n    title: '500 Loyalty Points',\n    description: 'Redeem for gift cards or premium features',\n    imageUrl: '/images/rewards/loyalty-points.png',\n    xpRequired: 3500,\n    rarity: 'Rare',\n    type: 'LoyaltyPoints',\n    claimed: false\n  },\n  {\n    id: 'reward-005',\n    title: 'PersonaSync Premium T-Shirt',\n    description: 'High-quality t-shirt with exclusive design',\n    imageUrl: '/images/rewards/tshirt.png',\n    xpRequired: 5000,\n    rarity: 'Epic',\n    type: 'Merchandise',\n    claimed: false\n  },\n  {\n    id: 'reward-006',\n    title: 'Early Access to New Features',\n    description: 'Get access to new platform features before anyone else',\n    imageUrl: '/images/rewards/early-access.png',\n    xpRequired: 7500,\n    rarity: 'Epic',\n    type: 'EventInvite',\n    claimed: false\n  },\n  {\n    id: 'reward-007',\n    title: 'PersonaSync Branded Hoodie',\n    description: 'Premium quality hoodie with exclusive design',\n    imageUrl: '/images/rewards/hoodie.png',\n    xpRequired: 10000,\n    rarity: 'Legendary',\n    type: 'Merchandise',\n    claimed: false\n  },\n  {\n    id: 'reward-008',\n    title: 'Lifetime Premium Membership',\n    description: 'Unlock all premium features permanently',\n    imageUrl: '/images/rewards/premium.png',\n    xpRequired: 15000,\n    rarity: 'Legendary',\n    type: 'LoyaltyPoints',\n    claimed: false\n  }\n];\n\n// Mock API functions\nexport const getRewardsData = async (): Promise<Reward[]> => {\n  // In a real app, this would be an API call\n  return new Promise(resolve => {\n    setTimeout(() => resolve(sampleRewards), 500);\n  });\n};\n\nexport const claimReward = async (rewardId: string): Promise<boolean> => {\n  // In a real app, this would be an API call\n  return new Promise(resolve => {\n    setTimeout(() => resolve(true), 500);\n  });\n};\n```\n\n10. Integrate the rewards system into the profile page:\n```tsx\n// Update ProfilePage.tsx to include the rewards system\nimport { RewardsContainer } from './rewards/RewardsContainer';\n\n// Inside the ProfilePage component\nreturn (\n  <div className=\"profile-page\">\n    <ProfileHeader user={userProfile} />\n    <XpProgressSection level={userProfile.level} xp={userProfile.xp} totalXp={userProfile.totalXp} />\n    <RewardsContainer userProfile={userProfile} />\n    <AchievementsSection achievements={userProfile.achievements} />\n    {/* Other sections */}\n  </div>\n);\n```\n\n11. Update the UserProfile interface to include reward-related fields:\n```typescript\n// Update src/types/UserProfile.ts\nexport interface UserProfile {\n  // Existing fields\n  id: string;\n  username: string;\n  // ...\n  \n  // Add reward-related fields\n  claimedRewards: string[]; // Array of claimed reward IDs\n  lastRewardClaimDate?: string;\n}\n```",
        "testStrategy": "1. Unit Testing:\n   - Test each reward component in isolation:\n   ```typescript\n   // src/components/rewards/__tests__/RewardCard.test.tsx\n   import { render, screen, fireEvent } from '@testing-library/react';\n   import { RewardCard } from '../RewardCard';\n   \n   const mockReward = {\n     id: 'test-reward-1',\n     title: 'Test Reward',\n     description: 'A test reward',\n     imageUrl: '/test-image.png',\n     xpRequired: 1000,\n     rarity: 'Rare' as const,\n     type: 'Voucher' as const,\n     claimed: false\n   };\n   \n   describe('RewardCard', () => {\n     test('renders reward details correctly', () => {\n       render(<RewardCard reward={mockReward} userXp={500} />);\n       \n       expect(screen.getByText('Test Reward')).toBeInTheDocument();\n       expect(screen.getByText('A test reward')).toBeInTheDocument();\n       expect(screen.getByText('Voucher')).toBeInTheDocument();\n       expect(screen.getByText('Rare')).toBeInTheDocument();\n     });\n     \n     test('shows progress bar for upcoming rewards', () => {\n       render(<RewardCard reward={mockReward} userXp={500} isUpcoming={true} />);\n       \n       expect(screen.getByText('500 / 1000 XP')).toBeInTheDocument();\n       const progressBar = document.querySelector('.progress-bar');\n       expect(progressBar).toBeInTheDocument();\n     });\n     \n     test('shows claim button for available rewards', () => {\n       const mockOnClaim = jest.fn();\n       render(\n         <RewardCard \n           reward={mockReward} \n           userXp={1000} \n           onClaim={mockOnClaim} \n         />\n       );\n       \n       const claimButton = screen.getByText('Claim Reward');\n       expect(claimButton).toBeInTheDocument();\n       \n       fireEvent.click(claimButton);\n       expect(mockOnClaim).toHaveBeenCalledWith('test-reward-1');\n     });\n     \n     test('shows claimed status for claimed rewards', () => {\n       const claimedReward = {\n         ...mockReward,\n         claimed: true,\n         claimDate: '2023-05-15T10:30:00Z'\n       };\n       \n       render(<RewardCard reward={claimedReward} userXp={1000} />);\n       \n       expect(screen.getByText(/Claimed on/)).toBeInTheDocument();\n     });\n   });\n   ```\n\n2. Integration Testing:\n   - Test the RewardsContainer component with mock data:\n   ```typescript\n   // src/components/rewards/__tests__/RewardsContainer.test.tsx\n   import { render, screen, waitFor } from '@testing-library/react';\n   import { RewardsContainer } from '../RewardsContainer';\n   import { getRewardsData, claimReward } from '../../../data/rewardsData';\n   \n   // Mock the API functions\n   jest.mock('../../../data/rewardsData', () => ({\n     getRewardsData: jest.fn(),\n     claimReward: jest.fn()\n   }));\n   \n   const mockUserProfile = {\n     id: 'user-1',\n     username: 'testuser',\n     displayName: 'Test User',\n     level: 5,\n     xp: 2000,\n     totalXp: 2500,\n     claimedRewards: []\n   };\n   \n   const mockRewards = [\n     {\n       id: 'reward-1',\n       title: 'Available Reward',\n       description: 'This reward is available',\n       imageUrl: '/test.png',\n       xpRequired: 2000,\n       rarity: 'Common' as const,\n       type: 'Voucher' as const,\n       claimed: false\n     },\n     {\n       id: 'reward-2',\n       title: 'Upcoming Reward',\n       description: 'This reward is upcoming',\n       imageUrl: '/test2.png',\n       xpRequired: 3000,\n       rarity: 'Rare' as const,\n       type: 'Merchandise' as const,\n       claimed: false\n     }\n   ];\n   \n   describe('RewardsContainer', () => {\n     beforeEach(() => {\n       (getRewardsData as jest.Mock).mockResolvedValue(mockRewards);\n       (claimReward as jest.Mock).mockResolvedValue(true);\n     });\n     \n     test('fetches and displays rewards correctly', async () => {\n       render(<RewardsContainer userProfile={mockUserProfile} />);\n       \n       // Wait for the rewards to load\n       await waitFor(() => {\n         expect(getRewardsData).toHaveBeenCalled();\n       });\n       \n       // Check that tabs are rendered\n       expect(screen.getByText('Available (1)')).toBeInTheDocument();\n       expect(screen.getByText('Upcoming (1)')).toBeInTheDocument();\n       \n       // Check that the available reward is displayed\n       expect(screen.getByText('Available Reward')).toBeInTheDocument();\n     });\n     \n     test('handles claiming rewards', async () => {\n       render(<RewardsContainer userProfile={mockUserProfile} />);\n       \n       // Wait for the rewards to load\n       await waitFor(() => {\n         expect(getRewardsData).toHaveBeenCalled();\n       });\n       \n       // Find and click the claim button\n       const claimButton = await screen.findByText('Claim Reward');\n       claimButton.click();\n       \n       // Verify the claim function was called\n       await waitFor(() => {\n         expect(claimReward).toHaveBeenCalledWith('reward-1');\n       });\n     });\n   });\n   ```\n\n3. Visual Testing:\n   - Test the appearance of different reward rarities:\n   ```typescript\n   // src/components/rewards/__tests__/RarityBadge.test.tsx\n   import { render, screen } from '@testing-library/react';\n   import { RarityBadge } from '../RarityBadge';\n   \n   describe('RarityBadge', () => {\n     test.each([\n       ['Common', 'rarity-common'],\n       ['Rare', 'rarity-rare'],\n       ['Epic', 'rarity-epic'],\n       ['Legendary', 'rarity-legendary']\n     ])('renders %s rarity with correct class', (rarity, expectedClass) => {\n       const { container } = render(<RarityBadge rarity={rarity as any} />);\n       \n       expect(screen.getByText(rarity)).toBeInTheDocument();\n       expect(container.firstChild).toHaveClass(expectedClass);\n     });\n   });\n   ```\n\n4. End-to-End Testing:\n   - Create Cypress tests to verify the full rewards system functionality:\n   ```typescript\n   // cypress/integration/rewards.spec.ts\n   describe('Rewards System', () => {\n     beforeEach(() => {\n       // Mock the user authentication\n       cy.intercept('GET', '/api/user/profile', { fixture: 'userProfile.json' });\n       cy.intercept('GET', '/api/rewards', { fixture: 'rewards.json' });\n       cy.intercept('POST', '/api/rewards/claim/*', { success: true });\n       \n       // Visit the profile page\n       cy.visit('/profile');\n     });\n     \n     it('displays rewards tabs correctly', () => {\n       cy.get('.rewards-tabs').should('exist');\n       cy.contains('Available').should('exist');\n       cy.contains('Upcoming').should('exist');\n       cy.contains('Claimed').should('exist');\n     });\n     \n     it('allows claiming an available reward', () => {\n       cy.contains('Available').click();\n       cy.contains('Test Reward').should('be.visible');\n       cy.contains('Claim Reward').click();\n       \n       // Verify the API call\n       cy.wait('@claimReward').its('request.url').should('include', '/api/rewards/claim/');\n       \n       // Verify the reward moved to claimed tab\n       cy.contains('Claimed').click();\n       cy.contains('Test Reward').should('be.visible');\n       cy.contains('Claimed on').should('be.visible');\n     });\n     \n     it('shows progress for upcoming rewards', () => {\n       cy.contains('Upcoming').click();\n       cy.contains('Future Reward').should('be.visible');\n       cy.get('.progress-bar').should('exist');\n       cy.contains('2000 / 5000 XP').should('be.visible');\n     });\n   });\n   ```\n\n5. Accessibility Testing:\n   - Test keyboard navigation and screen reader compatibility:\n   ```typescript\n   // src/components/rewards/__tests__/accessibility.test.tsx\n   import { render } from '@testing-library/react';\n   import { axe } from 'jest-axe';\n   import { RewardsContainer } from '../RewardsContainer';\n   \n   // Mock data\n   const mockUserProfile = { /* ... */ };\n   \n   describe('Rewards System Accessibility', () => {\n     test('should not have accessibility violations', async () => {\n       // Mock the API calls\n       jest.spyOn(global, 'fetch').mockImplementation(() => \n         Promise.resolve({\n           json: () => Promise.resolve([/* mock rewards */]),\n           ok: true\n         } as Response)\n       );\n       \n       const { container } = render(<RewardsContainer userProfile={mockUserProfile} />);\n       \n       // Wait for content to load\n       await new Promise(resolve => setTimeout(resolve, 100));\n       \n       // Run axe accessibility tests\n       const results = await axe(container);\n       expect(results).toHaveNoViolations();\n     });\n   });\n   ```\n\n6. Performance Testing:\n   - Test rendering performance with a large number of rewards:\n   ```typescript\n   // src/components/rewards/__tests__/performance.test.tsx\n   import { render } from '@testing-library/react';\n   import { RewardsGrid } from '../RewardsGrid';\n   \n   // Generate a large number of mock rewards\n   const generateMockRewards = (count: number) => {\n     return Array.from({ length: count }, (_, i) => ({\n       id: `reward-${i}`,\n       title: `Reward ${i}`,\n       description: 'Test description',\n       imageUrl: '/test.png',\n       xpRequired: 1000 * (i + 1),\n       rarity: ['Common', 'Rare', 'Epic', 'Legendary'][i % 4] as any,\n       type: ['Voucher', 'EventInvite', 'LoyaltyPoints', 'Merchandise'][i % 4] as any,\n       claimed: false\n     }));\n   };\n   \n   describe('Rewards Grid Performance', () => {\n     test('renders efficiently with many rewards', () => {\n       const availableRewards = generateMockRewards(20);\n       const upcomingRewards = generateMockRewards(30);\n       const claimedRewards = generateMockRewards(10);\n       \n       const start = performance.now();\n       \n       render(\n         <RewardsGrid\n           availableRewards={availableRewards}\n           upcomingRewards={upcomingRewards}\n           claimedRewards={claimedRewards}\n           userXp={5000}\n           onClaimReward={() => {}}\n         />\n       );\n       \n       const end = performance.now();\n       \n       // Rendering should be reasonably fast\n       expect(end - start).toBeLessThan(200);\n     });\n   });\n   ```\n\n7. Mobile Responsiveness Testing:\n   - Test the rewards system on different screen sizes:\n   ```typescript\n   // cypress/integration/rewards-responsive.spec.ts\n   describe('Rewards System Responsiveness', () => {\n     beforeEach(() => {\n       cy.intercept('GET', '/api/user/profile', { fixture: 'userProfile.json' });\n       cy.intercept('GET', '/api/rewards', { fixture: 'rewards.json' });\n     });\n     \n     it('displays correctly on mobile devices', () => {\n       cy.viewport('iphone-x');\n       cy.visit('/profile');\n       \n       cy.get('.rewards-container').should('be.visible');\n       cy.get('.rewards-grid').should('have.css', 'grid-template-columns', '1fr');\n     });\n     \n     it('displays correctly on tablets', () => {\n       cy.viewport('ipad-2');\n       cy.visit('/profile');\n       \n       cy.get('.rewards-container').should('be.visible');\n       // Check that multiple columns are displayed\n       cy.get('.rewards-grid').should('not.have.css', 'grid-template-columns', '1fr');\n     });\n     \n     it('displays correctly on desktops', () => {\n       cy.viewport(1920, 1080);\n       cy.visit('/profile');\n       \n       cy.get('.rewards-container').should('be.visible');\n       // Check that multiple columns are displayed\n       cy.get('.rewards-grid').should('not.have.css', 'grid-template-columns', '1fr');\n     });\n   });\n   ```",
        "status": "done",
        "dependencies": [
          4,
          9
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-28T19:18:04.930Z",
      "updated": "2025-06-28T21:02:03.546Z",
      "description": "Tasks for master context"
    }
  }
}